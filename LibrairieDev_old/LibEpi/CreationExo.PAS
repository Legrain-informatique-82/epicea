Unit CreationExo;
{ Generated by OD TB CREATOR (c) 1997-99 O.DAHAN odahan@cybercable.fr
  On 16/05/2002 16:32:31 }

interface
uses SysUtils,Windows, Classes, Graphics, Forms, Controls,
     StdCtrls, DBTables, DB, ExtCtrls, Dialogs,LibSql;

procedure CreateTablesExo(DBALIAS0 : String);

// Callbacks
Type TPseudoEvent = Procedure(T:Ttable;TableNum:Integer;var WantAbort:Boolean);

Var  BeforeCreateCB,
     AfterCreateCB,
     ProgressCB : TPseudoEvent;

Const
//DBALIAS0 : String =  'ExoDemo';


// how much tables to create
TABLECOUNT = 14;

implementation

// dummy callback
var
 wantabort:boolean;
 ListeCree,ListeExistante:TStringList;
Procedure DummyCallback(T:TTable;TableNum:Integer;var WantAbort:Boolean);
Begin {nothing} end;

procedure CreateTablesExo(DBALIAS0 : String);
var
  table: TTable;
  TblExists: Boolean;
   Query:TQuery;
  Label
TABLEno0, TABLEno1, TABLEno2, TABLEno3, TABLEno4,
TABLEno5, TABLEno6, TABLEno7, TABLEno8, TABLEno9,
TABLEno10, TABLEno11, TABLEno12, TABLEno13,TABLEno14,TABLEno15, LBLEND,

TABLEno0b, TABLEno1b, TABLEno2b, TABLEno3b, TABLEno4b,
TABLEno5b, TABLEno6b, TABLEno7b, TABLEno8b, TABLEno9b,
TABLEno10b, TABLEno11b, TABLEno12b, TABLEno13b,TABLEno14b,TABLEno15b, LBLENDb;

begin
ListeCree:=TStringList.create;
ListeExistante:=TStringList.create;
Screen.Cursor := crHourGlass;
Try
  table := TTable.Create(Application);
  Query:=TQuery.Create(Application);
  Query.DatabaseName :=DBALIAS0;
  Try
  with table do
  begin

    { Creating : DBALIAS0 --> Balance.DB }
    TABLEno0: // for internal jump
    DataBaseName := DBALIAS0;
    TableName := 'Balance.DB';
    // is table already existing ?
    with FieldDefs do Clear;
    TblExists:=False;
//    try Open; TblExists:=true; except end; // exists. skip this table
    try Open; TblExists:=true; except TblExists:=FileExists(IncludeTrailingPathDelimiter(DBALIAS0)+TableName) end; // exists. skip this table
    active:=false;
    if TblExists then goto TABLEno1b;
    with FieldDefs do
    begin
      Clear;
      Add('Compte', ftString, 8, False);
      Add('Tiers', ftString, 8, False);
      Add('Debit_Report', ftFloat, 0, False);
      Add('Credit_Report', ftFloat, 0, False);
      Add('Debit_Base', ftFloat, 0, False);
      Add('Credit_Base', ftFloat, 0, False);
      Add('Debit_Total', ftFloat, 0, False);
      Add('Credit_Total', ftFloat, 0, False);
      Add('Qt1_Report', ftFloat, 0, False);
      Add('Qt2_Report', ftFloat, 0, False);
      Add('Qt1_Base', ftFloat, 0, False);
      Add('Qt2_Base', ftFloat, 0, False);
      Add('Qt1_Total', ftFloat, 0, False);
      Add('Qt2_Total', ftFloat, 0, False);
      Add('ID_Affichage', ftInteger, 0, False);
    end; { FieldDefs }
    with IndexDefs do
    begin
      Clear;
      Add('', 'Compte;Tiers', [ixPrimary, ixUnique]);
    end; { IndexDefs }
//  Before create event
    WantAbort := False; 
    BeforeCreateCB(Table, 1, WantAbort);
    If WantAbort then Goto TABLEno1;

    Try If not TblExists then CreateTable; Except ShowMessage('Impossible de créer la table: Balance.DB'); End;
    try
     TableCreatePassWord(DBALIAS0,TableName,'lepelet');
    except
    end;


//  After create event
    WantAbort := False; 
    AfterCreateCB(Table, 1, WantAbort);
    If WantAbort then Goto LBLEND;

//  Progress event
    WantAbort := False; 
    ProgressCB(Table, 1, WantAbort);
    If WantAbort then Goto LBLEND;




    { Creating : DBALIAS0 --> BalanceTiers.DB }
    TABLEno1b:
    TABLEno1: // for internal jump
    DataBaseName := DBALIAS0;
    TableName := 'BalanceTiers.DB';
    // is table already existing ? 
    with FieldDefs do Clear;
    TblExists:=False;
//    try Open; TblExists:=true; except end; // exists. skip this table
    try Open; TblExists:=true; except TblExists:=FileExists(IncludeTrailingPathDelimiter(DBALIAS0)+TableName) end; // exists. skip this table
    if TblExists then
    begin
        try
          IndexDefs.Clear;
            active:=false;
          Query.Close;
          Query.SQL.Clear;
          Query.SQL.Add(' CREATE INDEX Tiers');
          Query.SQL.Add(' ON "BalanceTiers.db" (Tiers)');
          Query.ExecSQL;
          IndexDefs.Update;
         except
         end;
    end;
    active:=false;

    if TblExists then goto TABLEno2b;
    with FieldDefs do
    begin
      Clear;
      Add('Compte', ftString, 8, False);
      Add('Tiers', ftString, 8, False);
      Add('Debit_Report', ftFloat, 0, False);
      Add('Credit_Report', ftFloat, 0, False);
      Add('Debit_Base', ftFloat, 0, False);
      Add('Credit_Base', ftFloat, 0, False);
      Add('Debit_Total', ftFloat, 0, False);
      Add('Credit_Total', ftFloat, 0, False);
      Add('Qt1_Report', ftFloat, 0, False);
      Add('Qt2_Report', ftFloat, 0, False);
      Add('Qt1_Base', ftFloat, 0, False);
      Add('Qt2_Base', ftFloat, 0, False);
      Add('Qt1_Total', ftFloat, 0, False);
      Add('Qt2_Total', ftFloat, 0, False);
      Add('ID_Affichage', ftInteger, 0, False);
    end; { FieldDefs }
    with IndexDefs do
    begin
      Clear;
      Add('', 'Compte;Tiers', [ixPrimary, ixUnique]);
      Add('Tiers', 'Tiers', [ixCaseInsensitive]);
    end; { IndexDefs }
//  Before create event
    WantAbort := False;
    BeforeCreateCB(Table, 2, WantAbort);
    If WantAbort then Goto TABLEno2;

    Try If not TblExists then CreateTable; Except ShowMessage('Impossible de créer la table: BalanceTiers.DB'); End;
    try
     TableCreatePassWord(DBALIAS0,TableName,'lepelet');
    except
    end;


//  After create event
    WantAbort := False; 
    AfterCreateCB(Table, 2, WantAbort);
    If WantAbort then Goto LBLEND;

//  Progress event
    WantAbort := False; 
    ProgressCB(Table, 2, WantAbort);
    If WantAbort then Goto LBLEND;




    { Creating : DBALIAS0 --> ChargeAPayer.DB }
    TABLEno2b:
    TABLEno2: // for internal jump
    DataBaseName := DBALIAS0;
    TableName := 'ChargeAPayer.DB';
    // is table already existing ? 
    with FieldDefs do Clear;
    TblExists:=False;
//    try Open; TblExists:=true; except end; // exists. skip this table
    try Open; TblExists:=true; except TblExists:=FileExists(IncludeTrailingPathDelimiter(DBALIAS0)+TableName) end; // exists. skip this table
    active:=false;
    if TblExists then goto TABLEno3b;
    with FieldDefs do
    begin
      Clear;
      Add('ID', ftInteger, 0, False);
      Add('Compte', ftString, 8, False);
      Add('Libelle', ftString, 100, False);
      Add('Sens', ftString, 1, False);
      Add('Qte', ftFloat, 0, False);
      Add('MontantHT', ftCurrency, 0, False);
      Add('DateSaisie', ftDate, 0, False);
      Add('DateExercice', ftDate, 0, False);
      Add('Compte2', ftString, 8, False);
      Add('Libelle2', ftString, 30, False);
      Add('TVA', ftCurrency, 0, False);
      Add('DateSysteme', ftDateTime, 0, False);
      Add('Date_Piece', ftDate, 0, False);
      Add('Reference', ftString, 9, False);
      Add('Id_Piece', ftInteger, 0, False);
    end; { FieldDefs }
    with IndexDefs do
    begin
      Clear;
      Add('', 'ID', [ixPrimary, ixUnique]);
      Add('cpte', 'Compte2', [ixCaseInsensitive]);
    end; { IndexDefs }
//  Before create event
    WantAbort := False; 
    BeforeCreateCB(Table, 3, WantAbort);
    If WantAbort then Goto TABLEno3;

    Try If not TblExists then CreateTable; Except ShowMessage('Impossible de créer la table: ChargeAPayer.DB'); End;
    try
     TableCreatePassWord(DBALIAS0,TableName,'lepelet');
    except
    end;


//  After create event
    WantAbort := False; 
    AfterCreateCB(Table, 3, WantAbort);
    If WantAbort then Goto LBLEND;

//  Progress event
    WantAbort := False; 
    ProgressCB(Table, 3, WantAbort);
    If WantAbort then Goto LBLEND;




    { Creating : DBALIAS0 --> ChargesRepartir.DB }
    TABLEno3b:
    TABLEno3: // for internal jump
    DataBaseName := DBALIAS0;
    TableName := 'ChargesRepartir.DB';
    // is table already existing ? 
    with FieldDefs do Clear;
    TblExists:=False;
//    try Open; TblExists:=true; except end; // exists. skip this table
    try Open; TblExists:=true; except TblExists:=FileExists(IncludeTrailingPathDelimiter(DBALIAS0)+TableName) end; // exists. skip this table
    active:=false;
    if TblExists then goto TABLEno4b;
    with FieldDefs do
    begin
      Clear;
      Add('ID', ftInteger, 0, False);
      Add('Compte', ftString, 8, False);
      Add('Designation', ftString, 100, False);
      Add('MtTotalCharge', ftCurrency, 0, False);
      Add('MtBilanOuverture', ftCurrency, 0, False);
      Add('DateSysteme', ftDateTime, 0, False);
      Add('Reference', ftString, 9, False);
      Add('MontantReprise', ftCurrency, 0, False);
      Add('DateSaisie', ftDate, 0, False);
    end; { FieldDefs }
    with IndexDefs do
    begin
      Clear;
      Add('', 'ID', [ixPrimary, ixUnique]);
    end; { IndexDefs }
//  Before create event
    WantAbort := False; 
    BeforeCreateCB(Table, 4, WantAbort);
    If WantAbort then Goto TABLEno4;

    Try If not TblExists then CreateTable; Except ShowMessage('Impossible de créer la table: ChargesRepartir.DB'); End;
    try
     TableCreatePassWord(DBALIAS0,TableName,'lepelet');
    except
    end;


//  After create event
    WantAbort := False; 
    AfterCreateCB(Table, 4, WantAbort);
    If WantAbort then Goto LBLEND;

//  Progress event
    WantAbort := False; 
    ProgressCB(Table, 4, WantAbort);
    If WantAbort then Goto LBLEND;




    { Creating : DBALIAS0 --> DepensesEntreprises.DB }
    TABLEno4b:
    TABLEno4: // for internal jump
    DataBaseName := DBALIAS0;
    TableName := 'DepensesEntreprises.DB';
    // is table already existing ? 
    with FieldDefs do Clear;
    TblExists:=False;
    try Open; TblExists:=true; except TblExists:=FileExists(IncludeTrailingPathDelimiter(DBALIAS0)+TableName) end; // exists. skip this table
    active:=false;
    if TblExists then goto TABLEno5b;
    with FieldDefs do
    begin
      Clear;
      Add('ID', ftInteger, 0, False);
      Add('Compte', ftString, 8, False);
      Add('Libelle', ftString, 100, False);
      Add('Sens', ftString, 1, False);
      Add('Qte', ftFloat, 0, False);
      Add('MontantHT', ftCurrency, 0, False);
      Add('DateSaisie', ftDate, 0, False);
      Add('DateExercice', ftDate, 0, False);
      Add('Compte2', ftString, 8, False);
      Add('Libelle2', ftString, 100, False);
      Add('TVA', ftCurrency, 0, False);
      Add('DatePiece', ftDate, 0, False);
      Add('Reference', ftString, 9, False);
      Add('DateSysteme', ftDateTime, 0, False);
    end; { FieldDefs }
    with IndexDefs do
    begin
      Clear;
      Add('', 'ID', [ixPrimary, ixUnique]);
      Add('cpte', 'Compte2', [ixCaseInsensitive]);
    end; { IndexDefs }
//  Before create event
    WantAbort := False; 
    BeforeCreateCB(Table, 5, WantAbort);
    If WantAbort then Goto TABLEno5;

    Try If not TblExists then CreateTable; Except ShowMessage('Impossible de créer la table: DepensesEntreprises.DB'); End;
    try
     TableCreatePassWord(DBALIAS0,TableName,'lepelet');
    except
    end;


//  After create event
    WantAbort := False; 
    AfterCreateCB(Table, 5, WantAbort);
    If WantAbort then Goto LBLEND;

//  Progress event
    WantAbort := False; 
    ProgressCB(Table, 5, WantAbort);
    If WantAbort then Goto LBLEND;




//    { Creating : DBALIAS0 --> Emprunts.DB }
//    TABLEno5b:
//    TABLEno5: // for internal jump
//    DataBaseName := DBALIAS0;
//    TableName := 'Emprunts.DB';
//    // is table already existing ?
//    with FieldDefs do Clear;
//    TblExists:=False;
//    try Open; TblExists:=true; except TblExists:=FileExists(IncludeTrailingPathDelimiter(DBALIAS0)+TableName) end; // exists. skip this table
//    active:=false;
//    if TblExists then goto TABLEno6b;
//    with FieldDefs do
//    begin
//      Clear;
//      Add('ID', ftInteger, 0, False);
//      Add('Code_Emp', ftString, 10, False);
//      Add('Compte_Emp', ftString, 8, False);
//      Add('Designation_Emp', ftString, 100, False);
//      Add('CapiResteDu_Emp', ftCurrency, 0, False);
//      Add('CapiTotal_Emp', ftCurrency, 0, False);
//      Add('CodeGr', ftString, 3, False);
//      Add('DateRealisation', ftDateTime, 0, False);
//      Add('NbPeriode', ftFloat, 0, False);
//      Add('P1', ftFloat, 0, False);
//      Add('PP1', ftFloat, 0, False);
//      Add('P2', ftFloat, 0, False);
//      Add('PP2', ftFloat, 0, False);
//      Add('P3', ftFloat, 0, False);
//      Add('PP3', ftFloat, 0, False);
//      Add('TypeRb', ftString, 3, False);
//      Add('PeriodeRb', ftString, 3, False);
//      Add('Differe', ftFloat, 0, False);
//      Add('FraisAnnexe', ftFloat, 0, False);
//      Add('DatePremEcheance', ftDateTime, 0, False);
//      Add('CapitalRbPE', ftFloat, 0, False);
//      Add('InteretRbPE', ftFloat, 0, False);
//      Add('NbRbFait', ftFloat, 0, False);
//      Add('Banque', ftString, 30, False);
//      Add('Actif', ftBoolean, 0, False);
//    end; { FieldDefs }
//    with IndexDefs do
//    begin
//      Clear;
//      Add('', 'ID;Code_Emp;Compte_Emp', [ixPrimary, ixUnique]);
//      Add('Code', 'Code_Emp', [ixCaseInsensitive]);
//    end; { IndexDefs }
////  Before create event
//    WantAbort := False; 
//    BeforeCreateCB(Table, 6, WantAbort);
//    If WantAbort then Goto TABLEno6;
//
//    Try If not TblExists then CreateTable; Except ShowMessage('Impossible de créer la table: Emprunts.DB'); End;
//    try
//     TableCreatePassWord(DBALIAS0,TableName,'lepelet');
//    except
//    end;
//
//
////  After create event
//    WantAbort := False; 
//    AfterCreateCB(Table, 6, WantAbort);
//    If WantAbort then Goto LBLEND;
//
////  Progress event
//    WantAbort := False; 
//    ProgressCB(Table, 6, WantAbort);
//    If WantAbort then Goto LBLEND;




    { Creating : DBALIAS0 --> Immos_clot.db }
    TABLEno5b:
    TABLEno5: // for internal jump
    DataBaseName := DBALIAS0;
    TableName := 'Immos_clot.db';
    // is table already existing ?
    with FieldDefs do Clear;
    TblExists:=False;
    try Open; TblExists:=true; except TblExists:=FileExists(IncludeTrailingPathDelimiter(DBALIAS0)+TableName) end; // exists. skip this table
    active:=false;
    if TblExists then goto TABLEno6b;
    with FieldDefs do
    begin
      Clear;
      Add('ID', ftInteger, 0, False);
      Add('Code', ftFloat, 0, False);
      Add('Reference_OP', ftString, 15, False);
      Add('COMPTE', ftString, 8, False);
      Add('Contrepartie', ftString, 8, False);
      Add('Designation', ftString, 100, False);
      Add('Quantite', ftInteger, 0, False);
      Add('Montant', ftCurrency, 0, False);
      Add('TVA', ftCurrency, 0, False);
      Add('Date', ftDate, 0, False);
      Add('Type_Immo', ftFloat, 0, False);
    end; { FieldDefs }
    with IndexDefs do
    begin
      Clear;
      Add('', 'ID', [ixPrimary, ixUnique]);
      Add('_Code', 'Code', [ixCaseInsensitive]);
    end; { IndexDefs }
//  Before create event
    WantAbort := False;
    BeforeCreateCB(Table, 6, WantAbort);
    If WantAbort then Goto TABLEno6;

    Try If not TblExists then CreateTable; Except ShowMessage('Impossible de créer la table: Immos_clot.db'); End;
    try
     TableCreatePassWord(DBALIAS0,TableName,'lepelet');
    except
    end;


//  After create event
    WantAbort := False;
    AfterCreateCB(Table, 6, WantAbort);
    If WantAbort then Goto LBLEND;

//  Progress event
    WantAbort := False;
    ProgressCB(Table, 6, WantAbort);
    If WantAbort then Goto LBLEND;




    { Creating : DBALIAS0 --> PCA.db }
    TABLEno6b:
    TABLEno6: // for internal jump
    DataBaseName := DBALIAS0;
    TableName := 'PCA.db';
    // is table already existing ?
    with FieldDefs do Clear;
    TblExists:=False;
    try Open; TblExists:=true; except TblExists:=FileExists(IncludeTrailingPathDelimiter(DBALIAS0)+TableName) end; // exists. skip this table
    active:=false;
    if TblExists then goto TABLEno7b;
    with FieldDefs do
    begin
      Clear;
      Add('ID', ftInteger, 0, False);
      Add('Compte', ftString, 8, False);
      Add('Libelle', ftString, 100, False);
      Add('Sens', ftString, 1, False);
      Add('Qte', ftFloat, 0, False);
      Add('MontantHT', ftCurrency, 0, False);
      Add('DateSaisie', ftDate, 0, False);
      Add('DateExercice', ftDate, 0, False);
      Add('Compte2', ftString, 8, False);
      Add('Libelle2', ftString, 100, False);
      Add('DateSysteme', ftDateTime, 0, False);
      Add('Date_Piece', ftDate, 0, False);
      Add('Reference', ftString, 9, False);
    end; { FieldDefs }
    with IndexDefs do
    begin
      Clear;
      Add('', 'ID', [ixPrimary, ixUnique]);
      Add('Cpte', 'Compte2', [ixCaseInsensitive]);
    end; { IndexDefs }
//  Before create event
    WantAbort := False;
    BeforeCreateCB(Table, 7, WantAbort);
    If WantAbort then Goto TABLEno7;

    Try If not TblExists then CreateTable; Except ShowMessage('Impossible de créer la table: PCA.db'); End;
    try
     TableCreatePassWord(DBALIAS0,TableName,'lepelet');
    except
    end;


//  After create event
    WantAbort := False;
    AfterCreateCB(Table, 7, WantAbort);
    If WantAbort then Goto LBLEND;

//  Progress event
    WantAbort := False;
    ProgressCB(Table, 7, WantAbort);
    If WantAbort then Goto LBLEND;




    { Creating : DBALIAS0 --> Provisions.DB }
    TABLEno7b:
    TABLEno7: // for internal jump
    DataBaseName := DBALIAS0;
    TableName := 'Provisions.DB';
    // is table already existing ?
    with FieldDefs do Clear;
    TblExists:=False;
    try Open; TblExists:=true; except TblExists:=FileExists(IncludeTrailingPathDelimiter(DBALIAS0)+TableName) end; // exists. skip this table
    active:=false;
    if TblExists then goto TABLEno8b;
    with FieldDefs do
    begin
      Clear;
      Add('ID', ftInteger, 0, False);
      Add('Compte', ftString, 8, False);
      Add('Designation', ftString, 100, False);
      Add('MtTotalProvision', ftCurrency, 0, False);
      Add('MtBilanOuverture', ftCurrency, 0, False);
      Add('DateSysteme', ftDateTime, 0, False);
      Add('Reference', ftString, 9, False);
      Add('MontantReprise', ftCurrency, 0, False);
      Add('DateSaisie', ftDate, 0, False);
    end; { FieldDefs }
    with IndexDefs do
    begin
      Clear;
      Add('', 'ID', [ixPrimary, ixUnique]);
    end; { IndexDefs }
//  Before create event
    WantAbort := False;
    BeforeCreateCB(Table, 8, WantAbort);
    If WantAbort then Goto TABLEno8;

    Try If not TblExists then CreateTable; Except ShowMessage('Impossible de créer la table: Provisions.DB'); End;
    try
     TableCreatePassWord(DBALIAS0,TableName,'lepelet');
    except
    end;


//  After create event
    WantAbort := False;
    AfterCreateCB(Table, 8, WantAbort);
    If WantAbort then Goto LBLEND;

//  Progress event
    WantAbort := False;
    ProgressCB(Table, 8, WantAbort);
    If WantAbort then Goto LBLEND;




    { Creating : DBALIAS0 --> Reglemnt.DB }
    TABLEno8b:
    TABLEno8: // for internal jump
    DataBaseName := DBALIAS0;
    TableName := 'Reglemnt.DB';
    // is table already existing ?
    with FieldDefs do Clear;
    TblExists:=False;
    try Open; TblExists:=true; except TblExists:=FileExists(IncludeTrailingPathDelimiter(DBALIAS0)+TableName) end; // exists. skip this table
    active:=false;
    if TblExists then goto TABLEno9b;
    with FieldDefs do
    begin
      Clear;
      Add('ID', ftAutoInc, 0, False);
      Add('ID_Debit', ftInteger, 0, False);
      Add('ID_Credit', ftInteger, 0, False);
      Add('Date', ftDate, 0, False);
      Add('Montant', ftFloat, 0, False);
      Add('TvaDate', ftDate, 0, False);
      Add('Validation', ftDate, 0, False);
      Add('Qui', ftString, 10, False);
      Add('Quand', ftDateTime, 0, False);
    end; { FieldDefs }
    with IndexDefs do
    begin
      Clear;
      Add('', 'ID', [ixPrimary, ixUnique]);
      Add('Credit_', 'ID_Credit;Date', [ixCaseInsensitive]);
      Add('Debit_', 'ID_Debit;Date', [ixCaseInsensitive]);
    end; { IndexDefs }
//  Before create event
    WantAbort := False;
    BeforeCreateCB(Table, 9, WantAbort);
    If WantAbort then Goto TABLEno9;

    Try If not TblExists then CreateTable; Except ShowMessage('Impossible de créer la table: Reglemnt.DB'); End;
    try
     TableCreatePassWord(DBALIAS0,TableName,'lepelet');
    except
    end;


//  After create event
    WantAbort := False;
    AfterCreateCB(Table, 9, WantAbort);
    If WantAbort then Goto LBLEND;

//  Progress event
    WantAbort := False;
    ProgressCB(Table, 9, WantAbort);
    If WantAbort then Goto LBLEND;




    { Creating : DBALIAS0 --> Stock.DB }
    TABLEno9b:
    TABLEno9: // for internal jump
    DataBaseName := DBALIAS0;
    TableName := 'Stock.DB';
    // is table already existing ?
    with FieldDefs do Clear;
    TblExists:=False;
    try Open; TblExists:=true; except TblExists:=FileExists(IncludeTrailingPathDelimiter(DBALIAS0)+TableName) end; // exists. skip this table
    active:=false;
    if TblExists then goto TABLEno10b;
    with FieldDefs do
    begin
      Clear;
      Add('ID', ftInteger, 0, False);
      Add('Compte', ftString, 8, False);
      Add('Designation', ftString, 100, False);
      Add('Qte', ftFloat, 0, False);
      Add('Prix_Unitaire', ftCurrency, 0, False);
      Add('Decote', ftSmallInt, 0, False);
      Add('MontantTotalHT', ftCurrency, 0, False);
      Add('Actif', ftBoolean, 0, False);
      Add('Date_Saisie', ftDate, 0, False);
      Add('Date_ID_Exercice', ftDate, 0, False);
      Add('Date_Piece', ftDate, 0, False);
      Add('Reference', ftString, 9, False);
    end; { FieldDefs }
    with IndexDefs do
    begin
      Clear;
      Add('', 'ID;Compte', [ixPrimary, ixUnique]);
      Add('Cpte', 'Compte;ID', [ixCaseInsensitive]);
    end; { IndexDefs }
//  Before create event
    WantAbort := False;
    BeforeCreateCB(Table, 10, WantAbort);
    If WantAbort then Goto TABLEno10;

    Try If not TblExists then CreateTable; Except ShowMessage('Impossible de créer la table: Stock.DB'); End;
    try
     TableCreatePassWord(DBALIAS0,TableName,'lepelet');
    except
    end;


//  After create event
    WantAbort := False;
    AfterCreateCB(Table, 10, WantAbort);
    If WantAbort then Goto LBLEND;

//  Progress event
    WantAbort := False;
    ProgressCB(Table, 10, WantAbort);
    If WantAbort then Goto LBLEND;

// Fin de la première partie


    { Creating : DBALIAS0 --> TA_Atelier_Activite.db }
    TABLEno10b:
    TABLEno10: // for internal jump
    DataBaseName := DBALIAS0;
    TableName := 'TA_Atelier_Activite.db';
    // is table already existing ?
    with FieldDefs do Clear;
    TblExists:=False;
    try Open; TblExists:=true; except TblExists:=FileExists(IncludeTrailingPathDelimiter(DBALIAS0)+TableName) end; // exists. skip this table
    active:=false;
    if TblExists then goto TABLEno11b;
    with FieldDefs do
    begin
      Clear;
      Add('ID_Atelier', ftInteger, 0, False);
      Add('ID_Activite', ftInteger, 0, False);
      Add('Ratio', ftFloat, 0, False);
    end; { FieldDefs }
    with IndexDefs do
    begin
      Clear;
      Add('', 'ID_Atelier;ID_Activite', [ixPrimary, ixUnique]);
    end; { IndexDefs }
//  Before create event
    WantAbort := False;
    BeforeCreateCB(Table, 11, WantAbort);
    If WantAbort then Goto TABLEno11;

    Try If not TblExists then CreateTable; Except ShowMessage('Impossible de créer la table: TA_Atelier_Activite.db'); End;
    try
     TableCreatePassWord(DBALIAS0,TableName,'lepelet');
    except
    end;


//  After create event
    WantAbort := False;
    AfterCreateCB(Table, 11, WantAbort);
    If WantAbort then Goto LBLEND;

//  Progress event
    WantAbort := False;
    ProgressCB(Table, 11, WantAbort);
    If WantAbort then Goto LBLEND;


    { Creating : DBALIAS0 --> TA_Compte_Atelier.db }
    TABLEno11b:
    TABLEno11: // for internal jump
    DataBaseName := DBALIAS0;
    TableName := 'TA_Compte_Atelier.db';
    // is table already existing ?
    with FieldDefs do Clear;
    TblExists:=False;
    try Open; TblExists:=true; except TblExists:=FileExists(IncludeTrailingPathDelimiter(DBALIAS0)+TableName) end; // exists. skip this table
    active:=false;
    if TblExists then goto TABLEno12b;
    with FieldDefs do
    begin
      Clear;
      Add('Compte', ftString, 8, False);
      Add('ID_Atelier', ftInteger, 0, False);
      Add('Libelle', ftString, 100, False);
      Add('Ratio', ftFloat, 0, False);
    end; { FieldDefs }
    with IndexDefs do
    begin
      Clear;
      Add('', 'Compte;ID_Atelier', [ixPrimary, ixUnique]);
    end; { IndexDefs }
//  Before create event
    WantAbort := False;
    BeforeCreateCB(Table, 12, WantAbort);
    If WantAbort then Goto TABLEno12;

    Try If not TblExists then CreateTable; Except ShowMessage('Impossible de créer la table: TA_Compte_Atelier.db'); End;
    try
     TableCreatePassWord(DBALIAS0,TableName,'lepelet');
    except
    end;


//  After create event
    WantAbort := False;
    AfterCreateCB(Table, 12, WantAbort);
    If WantAbort then Goto LBLEND;

//  Progress event
    WantAbort := False;
    ProgressCB(Table, 12, WantAbort);
    If WantAbort then Goto LBLEND;


    { Creating : DBALIAS0 --> TA_Ecriture_Atelier.db }
    TABLEno12b:
    TABLEno12: // for internal jump
    DataBaseName := DBALIAS0;
    TableName := 'TA_Ecriture_Atelier.db';
    // is table already existing ?
    with FieldDefs do Clear;
    TblExists:=False;
    try Open; TblExists:=true; except TblExists:=FileExists(IncludeTrailingPathDelimiter(DBALIAS0)+TableName) end; // exists. skip this table
    active:=false;
    if TblExists then goto TABLEno13b;
    with FieldDefs do
    begin
      Clear;
      Add('ID_Ligne', ftInteger, 0, False);
      Add('ID_Atelier', ftInteger, 0, False);
      Add('Libelle', ftString, 100, False);
      Add('Ratio', ftFloat, 0, False);
    end; { FieldDefs }
    with IndexDefs do
    begin
      Clear;
      Add('', 'ID_Ligne;ID_Atelier', [ixPrimary, ixUnique]);
    end; { IndexDefs }
//  Before create event
    WantAbort := False;
    BeforeCreateCB(Table, 13, WantAbort);
    If WantAbort then Goto TABLEno13b;

    Try If not TblExists then CreateTable; Except ShowMessage('Impossible de créer la table: TA_Ecriture_Atelier.db'); End;
    try
     TableCreatePassWord(DBALIAS0,TableName,'lepelet');
    except
    end;


//  After create event
    WantAbort := False;
    AfterCreateCB(Table, 13, WantAbort);
    If WantAbort then Goto LBLEND;

//  Progress event
    WantAbort := False;
    ProgressCB(Table, 13, WantAbort);
    If WantAbort then Goto LBLEND;



    { Creating : DBALIAS0 --> Report.DB }
    TABLEno13b:
    TABLEno13: // for internal jump
    DataBaseName := DBALIAS0;
    TableName := 'Report.DB';
    // is table already existing ?
    with FieldDefs do Clear;
    TblExists:=False;
    try Open; TblExists:=true; except TblExists:=FileExists(IncludeTrailingPathDelimiter(DBALIAS0)+TableName) end; // exists. skip this table
    active:=false;
    if TblExists then goto TABLEno14b;
    with FieldDefs do
    begin
      Clear;
      Add('Compte', ftString, 8, False);
      Add('Tiers', ftString, 8, False);
      Add('Debit_Report', ftFloat, 0, False);
      Add('Credit_Report', ftFloat, 0, False);
      Add('Debit_Base', ftFloat, 0, False);
      Add('Credit_Base', ftFloat, 0, False);
      Add('Debit_Total', ftFloat, 0, False);
      Add('Credit_Total', ftFloat, 0, False);
      Add('Qt1_Report', ftFloat, 0, False);
      Add('Qt2_Report', ftFloat, 0, False);
      Add('Qt1_Base', ftFloat, 0, False);
      Add('Qt2_Base', ftFloat, 0, False);
      Add('Qt1_Total', ftFloat, 0, False);
      Add('Qt2_Total', ftFloat, 0, False);
      Add('ID_Affichage', ftInteger, 0, False);
    end; { FieldDefs }
    with IndexDefs do
    begin
      Clear;
      Add('', 'Compte;Tiers', [ixPrimary, ixUnique]);
    end; { IndexDefs }
//  Before create event
    WantAbort := False;
    BeforeCreateCB(Table, 14, WantAbort);
    If WantAbort then Goto TABLEno14b;

    Try If not TblExists then CreateTable; Except ShowMessage('Impossible de créer la table: Report.DB'); End;
    try
     TableCreatePassWord(DBALIAS0,TableName,'lepelet');
    except
    end;


//  After create event
    WantAbort := False;
    AfterCreateCB(Table, 14, WantAbort);
    If WantAbort then Goto LBLEND;

//  Progress event
    WantAbort := False;
    ProgressCB(Table, 14, WantAbort);
    If WantAbort then Goto LBLEND;

    { Creating : DBALIAS0 --> Ta_utilisation_deduc.db }

    TABLEno14b:
    TABLEno14: // for internal jump
    DataBaseName := DBALIAS0;
    TableName := 'Ta_utilisation_deduc.db';
    // is table already existing ?
    with FieldDefs do Clear;
    TblExists:=False;
    try Open; TblExists:=true; except TblExists:=FileExists(IncludeTrailingPathDelimiter(DBALIAS0)+TableName) end; // exists. skip this table
    if TblExists then
     begin
       try
          active:=false;//
          if fieldDefs.IndexOf('Libelle_Reinteg')=-1 then
          begin
          Query.Close;
          Query.SQL.Clear;
          Query.SQL.Add(' Alter table Ta_utilisation_deduc');
          Query.SQL.Add(' add Libelle_Reinteg varchar(100)');
          Query.ExecSQL;
          end;
       except
       end;
//

       try
          Query.Close;
          Query.SQL.Clear;
          Query.SQL.Add(' drop INDEX Ta_utilisation_deduc.Exercice ');
          Query.ExecSQL;
       except
       end;

       try
          Query.Close;
          Query.SQL.Clear;
          Query.SQL.Add(' CREATE descending INDEX Exercice ');
          Query.SQL.Add(' ON "Ta_utilisation_deduc.db" (Exercice)');
          Query.ExecSQL;
          IndexDefs.Update;
       except
       end;
     end;
    active:=false;
    if TblExists then goto TABLEno15b;
    with FieldDefs do
    begin
      Clear;
      Add('ID', ftInteger, 0, False);
      Add('ID_deduction', ftInteger, 0, False);
      Add('id_immo', ftInteger, 0, False);
      Add('Exercice', ftString, 3, False);
      Add('Mt_immo', ftCurrency, 0, False);
      Add('Mt_social', ftCurrency, 0, False);
      Add('Mt_stocks', ftCurrency, 0, False);
      Add('Reinteg_except', ftCurrency, 0, False);
      Add('Libelle_Reinteg', ftString, 100, False);
      Add('Divers_Str', ftString, 255, False);
    end; { FieldDefs }
    with IndexDefs do
    begin
      Clear;
      Add('', 'ID', [ixPrimary, ixUnique]);
      Add('deduc', 'ID_deduction', [ixCaseInsensitive]);
      Add('immo', 'id_immo', [ixCaseInsensitive]);
      Add('Exercice', 'Exercice', [ixCaseInsensitive]);
    end; { IndexDefs }


//  Before create event
    WantAbort := False;
    BeforeCreateCB(Table, 15, WantAbort);
    If WantAbort then Goto TABLEno15;

    Try If not TblExists then CreateTable; Except ShowMessage('Impossible de créer la table: Ta_utilisation_deduc.db'); End;
    try
     TableCreatePassWord(DBALIAS0,TableName,'lepelet');
    except
    end;


//  After create event
    WantAbort := False;
    AfterCreateCB(Table, 15, WantAbort);
    If WantAbort then Goto LBLEND;

//  Progress event
    WantAbort := False;
    ProgressCB(Table, 15, WantAbort);
    If WantAbort then Goto LBLEND;

    { Creating : DBALIAS0 --> Ta_deduction.db }

    TABLEno15b:
    TABLEno15: // for internal jump
    DataBaseName := DBALIAS0;
    TableName := 'Ta_deduction.db';
    // is table already existing ?
    with FieldDefs do Clear;
    TblExists:=False;
    try Open; TblExists:=true; except TblExists:=FileExists(IncludeTrailingPathDelimiter(DBALIAS0)+TableName) end; // exists. skip this table
//    if TblExists then
//     begin
//       try
//          IndexDefs.Clear;
//          active:=false;
//          Query.Close;
//          Query.SQL.Clear;
//          Query.SQL.Add(' CREATE INDEX Exercice ');
//          Query.SQL.Add(' ON "Ta_deduction.db" (Mt_N,Mt_N1,Mt_N2,Mt_N3,Mt_N4,Mt_N5)');
//          Query.ExecSQL;
//          IndexDefs.Update;
//       except
//       end;
//     end;
    active:=false;
    if TblExists then goto LBLENDb;
    with FieldDefs do
    begin
      Clear;
      Add('ID', ftInteger, 0, False);
      Add('Libelle', ftString, 100, False);
      Add('Mt_N', ftCurrency, 0, False);
      Add('Mt_N1', ftCurrency, 0, False);
      Add('Mt_N2', ftCurrency, 0, False);
      Add('Mt_N3', ftCurrency, 0, False);
      Add('Mt_N4', ftCurrency, 0, False);
      Add('Mt_N5', ftCurrency, 0, False);
      Add('Reste', ftCurrency, 0, False);
      Add('Divers_Str', ftString, 255, False);
    end; { FieldDefs }
    with IndexDefs do
    begin
      Clear;
      Add('', 'ID', [ixPrimary, ixUnique]);
     // Add('Exercice', 'Mt_N;Mt_N1;Mt_N2;Mt_N3;Mt_N4;Mt_N5', [ixExpression]);
    end; { IndexDefs }


//  Before create event
    WantAbort := False;
    BeforeCreateCB(Table, 16, WantAbort);
    If WantAbort then Goto LBLEND;

    Try If not TblExists then CreateTable; Except ShowMessage('Impossible de créer la table: Ta_deduction.db'); End;
    try
     TableCreatePassWord(DBALIAS0,TableName,'lepelet');
    except
    end;


//  After create event
    WantAbort := False;
    AfterCreateCB(Table, 16, WantAbort);
    If WantAbort then Goto LBLEND;

//  Progress event
    WantAbort := False;
    ProgressCB(Table, 16, WantAbort);
    If WantAbort then Goto LBLEND;



  end; { table }
  LBLEND:
  LBLENDb:
  Finally table.Free; end;
Finally
ListeCree.Free;
ListeExistante.Free;
Screen.Cursor:=crDefault;
end;
end;

INITIALIZATION
BeforeCreateCB := DummyCallBack;
AfterCreateCB  := DummyCallBack;
ProgressCB     := DummyCallBack;

end.
